<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:command="http://www.galasoft.ch/mvvmlight"
    xmlns:MVVMCore="clr-namespace:MVVM_TreeView.Core">

  <!-- TabControl -->


  <!--
    Render TabControl and Items with Perstitent TabControl
    -->
  <!-- Ref: http://msdn.microsoft.com/en-us/library/ms752032(v=VS.90).aspx -->
  <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="1.0"/>
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>

  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
  <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />
  <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

  <Style x:Key="PersistTabItemStyleSingle" TargetType="{x:Type TabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <ControlTemplate.Resources>
            <BooleanToVisibilityConverter x:Key="b2v" />
          </ControlTemplate.Resources>
          <Border Name="Border"
                  Background="{StaticResource LightBrush}"
                  BorderBrush="{StaticResource SolidBorderBrush}"
                  BorderThickness="1,1,1,0"
                  Margin="0,0,-4,0"
                  CornerRadius="5,5,0,0"
                  Padding="6,0,6,0"
                            >
            <DockPanel Height="20" Name="Dock">
              <ContentPresenter
                  Content="{Binding Path=DisplayName}"
                  VerticalAlignment="Center"
                                />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Panel.ZIndex" Value="100" />
              <Setter TargetName="Border" Property="Background" Value="{StaticResource WindowBackgroundBrush}" />
              <Setter TargetName="Border" Property="TextBlock.FontWeight" Value="Bold" />
              <!--<Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />-->
            </Trigger>

            <Trigger Property="IsSelected" Value="False">
              <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
              <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="PersistTabItemStyleMulti" TargetType="{x:Type TabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <ControlTemplate.Resources>
            <BooleanToVisibilityConverter x:Key="b2v" />
          </ControlTemplate.Resources>
          <Border Name="Border"
                  Background="{StaticResource LightBrush}"
                  BorderBrush="{StaticResource SolidBorderBrush}"
                  BorderThickness="1,1,1,0"
                  Margin="0,0,-4,0"
                  CornerRadius="5,5,0,0"
                  Padding="6,0,6,0"
                  Width="200"
                            >
            <DockPanel Height="20" Name="Dock">
              <TextBlock
                  Text="X"
                  Cursor="Hand"
                  DockPanel.Dock="Right"
                  Padding="4,0,4,0"
                  Margin="4,0,0,0"
                  VerticalAlignment="Center"
                  Visibility="{Binding Path=IsCloseable, Converter={StaticResource b2v}}"
                                >
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="MouseDown">
                    <command:EventToCommand Command="{Binding CloseCommand}"/>
                  </i:EventTrigger>
                </i:Interaction.Triggers>
                <TextBlock.Style>
                  <Style TargetType="TextBlock">
                    <Style.Triggers>
                      <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="LightGray" />
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </TextBlock.Style>
              </TextBlock>
              <ContentPresenter
                  Content="{Binding Path=DisplayName}"
                  VerticalAlignment="Center"
                            />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Panel.ZIndex" Value="100" />
              <Setter TargetName="Border" Property="Background" Value="LightBlue" />
              <Setter TargetName="Border" Property="TextBlock.FontWeight" Value="Bold" />
              <!--<Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
              <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Workspace -->

  <!-- 
    This template explains how to render 
    a tab item with a close button.
    Non-Persistent! Not used
    -->
  <DataTemplate x:Key="ClosableTabItemTemplate">
    <DataTemplate.Resources>
      <BooleanToVisibilityConverter x:Key="b2v" />
    </DataTemplate.Resources>
    <DockPanel Width="120">
      <Button
  Command="{Binding Path=CloseCommand}"
  Visibility="{Binding Path=IsCloseable, Converter={StaticResource b2v}}"
  Content="X"
  Cursor="Hand"
  DockPanel.Dock="Right"
  Focusable="False"
  FontFamily="Courier"
  FontSize="9"
  FontWeight="Bold"
  Margin="0,1,0,0"
  Padding="0"
  VerticalContentAlignment="Bottom"
  Width="16" Height="16"
        />
      <ContentPresenter
  Content="{Binding Path=DisplayName}"
  VerticalAlignment="Center"
        />
    </DockPanel>
  </DataTemplate>

  <!-- ToolBar -->

  <!--
    This template explains how to render Toolbaritems and separators
    -->
  <DataTemplate DataType="{x:Type MVVMCore:ToolBarItemViewModel}">
    <Button
            Command="{Binding ExecuteCommand}"
            IsEnabled="{Binding IsEnabled}"
            ToolTip="{Binding ToolTip}"
            Style="{DynamicResource ResourceKey={x:Static ToolBar.ButtonStyleKey}}"
              >
      <StackPanel>
        <Image Source="{Binding Image}" Height="16" />
        <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" />
      </StackPanel>
    </Button>
  </DataTemplate>

  <DataTemplate DataType="{x:Type MVVMCore:ToolBarItemSeparatorViewModel}">
    <Separator Margin="2,0,2,0">
      <Separator.LayoutTransform>
        <RotateTransform
            Angle="90" />
      </Separator.LayoutTransform>
    </Separator>
  </DataTemplate>

  <!--- SubMenuToolbarItem -->
  <DataTemplate DataType="{x:Type MVVMCore:SubMenuToolBarItemViewModel}">
    <Menu Background="Transparent">
      <MenuItem
          ToolTip="{Binding ToolTip}"
          ItemsSource="{Binding ToolBarItems}"
          IsEnabled="{Binding IsEnabled}">
        <MenuItem.Header>
          <StackPanel>
            <Image Source="{Binding Image}" Height="16" />
            <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" />
          </StackPanel>
        </MenuItem.Header>
        <MenuItem.ItemTemplate>
          <DataTemplate>
            <TextBlock Text="{Binding}" />
          </DataTemplate>
        </MenuItem.ItemTemplate>
        <MenuItem.ItemContainerStyle>
          <Style TargetType="MenuItem">
            <Setter Property="Header" Value="{Binding DisplayName}" />
            <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
            <Setter Property="Command" Value="{Binding ExecuteCommand}" />
            <Setter Property="ToolTip" Value="{Binding ToolTip}" />
          </Style>
        </MenuItem.ItemContainerStyle>
      </MenuItem>
    </Menu>
  </DataTemplate>

  <!-- TextSearchToolBarItem -->
  <DataTemplate DataType="{x:Type MVVMCore:SearchTextBoxToolBarItemViewModel}" x:Shared="false">
    <DockPanel VerticalAlignment="Center">
      <Label Content="{Binding DisplayName}" />
      <TextBox
          Width="100"
          Text="{Binding 
                Path=SearchText, 
                UpdateSourceTrigger=PropertyChanged,
                TargetNullValue={x:Static System:String.Empty}}"
                >
        <TextBox.InputBindings>
          <KeyBinding Key="Enter" Command="{Binding ExecuteCommand}"></KeyBinding>
        </TextBox.InputBindings>
      </TextBox>
      <Button ToolTip="{Binding ToolTip}" Margin="2" Command="{Binding ExecuteCommand}">
        <Image Source="/Resources/Images/Icons/search.png" Height="16" />
      </Button>
    </DockPanel>
  </DataTemplate>

</ResourceDictionary>